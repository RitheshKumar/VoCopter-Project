!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Animation	MainComponent.h	/^    ComponentAnimator Animation;$/;"	m	class:MainContentComponent
Body	CopterComponent.h	/^    CopterBody Body;$/;"	m	class:CopterComponent
Copter	MainComponent.h	/^    CopterComponent Copter;$/;"	m	class:MainContentComponent
CopterBody	CopterBody.cpp	/^CopterBody::CopterBody() {$/;"	f	class:CopterBody
CopterBody	CopterBody.h	/^class CopterBody : public Component {$/;"	c
CopterComponent	CopterComponent.cpp	/^CopterComponent::CopterComponent() {$/;"	f	class:CopterComponent
CopterComponent	CopterComponent.h	/^class CopterComponent : public Component$/;"	c
CopterFan	CopterFan.cpp	/^CopterFan::CopterFan() {$/;"	f	class:CopterFan
CopterFan	CopterFan.h	/^class CopterFan : public Component {$/;"	c
Fan	CopterComponent.h	/^    CopterFan Fan;$/;"	m	class:CopterComponent
MAINCOMPONENT_H_INCLUDED	MainComponent.h	/^#define MAINCOMPONENT_H_INCLUDED$/;"	d
MainContentComponent	MainComponent.cpp	/^MainContentComponent::MainContentComponent() : xpos(winWidth*0.15), ypos(winHeight*0.2)$/;"	f	class:MainContentComponent
MainContentComponent	MainComponent.h	/^class MainContentComponent   : public Component,$/;"	c
MainWindow	Main.cpp	/^        MainWindow (String name)  : DocumentWindow (name,$/;"	f	class:ThisIsCoptaaApplication::MainWindow
MainWindow	Main.cpp	/^    class MainWindow    : public DocumentWindow$/;"	c	class:ThisIsCoptaaApplication	file:
MidiTranslation	MidiTranslation.cpp	/^MidiTranslation::MidiTranslation() {$/;"	f	class:MidiTranslation
MidiTranslation	MidiTranslation.h	/^class MidiTranslation {$/;"	c
Obstacle	MainComponent.h	/^    ObstacleComponent Obstacle;$/;"	m	class:MainContentComponent
ObstacleComponent	ObstacleComponent.cpp	/^ObstacleComponent::ObstacleComponent () {$/;"	f	class:ObstacleComponent
ObstacleComponent	ObstacleComponent.h	/^class ObstacleComponent: private Timer,$/;"	c
ObstacleCourse	ObstacleComponent.h	/^    ObstacleCreate ObstacleCourse;$/;"	m	class:ObstacleComponent
ObstacleCreate	ObstacleComponent.cpp	/^ObstacleCreate::ObstacleCreate ():obstacleLength(noteNumber.size()),pathWidth(280.00) {$/;"	f	class:ObstacleCreate
ObstacleCreate	ObstacleComponent.h	/^class ObstacleCreate : public Component,$/;"	c
ThisIsCoptaaApplication	Main.cpp	/^    ThisIsCoptaaApplication() {}$/;"	f	class:ThisIsCoptaaApplication
ThisIsCoptaaApplication	Main.cpp	/^class ThisIsCoptaaApplication  : public JUCEApplication$/;"	c	file:
ThisIsCoptaa_CopterBody_h	CopterBody.h	/^#define ThisIsCoptaa_CopterBody_h$/;"	d
ThisIsCoptaa_CopterComponent_h	CopterComponent.h	/^#define ThisIsCoptaa_CopterComponent_h$/;"	d
ThisIsCoptaa_CopterFan_h	CopterFan.h	/^#define ThisIsCoptaa_CopterFan_h$/;"	d
ThisIsCoptaa_ObstacleComponent_h	ObstacleComponent.h	/^#define ThisIsCoptaa_ObstacleComponent_h$/;"	d
__ThisIsCoptaa__MidiTranslation__	MidiTranslation.h	/^#define __ThisIsCoptaa__MidiTranslation__$/;"	d
fileInputStream	MidiTranslation.h	/^    FileInputStream* fileInputStream;$/;"	m	class:MidiTranslation
fileMIDI	MidiTranslation.h	/^    MidiFile fileMIDI;$/;"	m	class:MidiTranslation
filePtr	MidiTranslation.h	/^    File* filePtr;$/;"	m	class:MidiTranslation
getObstacleLength	ObstacleComponent.h	/^    int getObstacleLength() { return obstacleLength;} $/;"	f	class:ObstacleComponent
height	ObstacleComponent.h	/^    int width,height;$/;"	m	class:ObstacleComponent
height	ObstacleComponent.h	/^    int width,height;$/;"	m	class:ObstacleCreate
keyPressed	MainComponent.cpp	/^bool MainContentComponent::keyPressed(const KeyPress& key)$/;"	f	class:MainContentComponent
mainWindow	Main.cpp	/^    ScopedPointer<MainWindow> mainWindow;$/;"	m	class:ThisIsCoptaaApplication	file:
midiEvent	MidiTranslation.h	/^    MidiMessageSequence::MidiEventHolder *midiEvent;$/;"	m	class:MidiTranslation
midiSequence	MidiTranslation.h	/^    const MidiMessageSequence *midiSequence;$/;"	m	class:MidiTranslation
midiVal	MidiTranslation.h	/^    MidiMessage midiVal;$/;"	m	class:MidiTranslation
normalize	ObstacleComponent.cpp	/^void ObstacleCreate::normalize(std::vector<float> *myVector) {$/;"	f	class:ObstacleCreate
noteNumber	MidiTranslation.h	/^    std::vector<float> noteNumber;$/;"	m	class:MidiTranslation
obstacleHeight	ObstacleComponent.h	/^    std::vector<float> obstacleHeight;$/;"	m	class:ObstacleCreate
obstacleLength	ObstacleComponent.h	/^    int obstacleLength = ObstacleCourse.obstacleLength;$/;"	m	class:ObstacleComponent
obstacleLength	ObstacleComponent.h	/^    int obstacleLength;$/;"	m	class:ObstacleCreate
override	MainComponent.h	/^    bool keyPressed(const KeyPress& key) override;$/;"	m	class:MainContentComponent
override	MainComponent.h	/^    void timerCallback() override;$/;"	m	class:MainContentComponent
override	ObstacleComponent.h	/^    void timerCallback () override;$/;"	m	class:ObstacleComponent
paint	CopterBody.cpp	/^void CopterBody::paint(Graphics &g) {  \/\/this function is continuously called. That's how GUI's work$/;"	f	class:CopterBody
paint	CopterFan.cpp	/^void CopterFan::paint(Graphics &g) {$/;"	f	class:CopterFan
paint	MainComponent.cpp	/^void MainContentComponent::paint (Graphics& g)$/;"	f	class:MainContentComponent
paint	ObstacleComponent.cpp	/^void ObstacleComponent::paint (Graphics &g) {$/;"	f	class:ObstacleComponent
paint	ObstacleComponent.cpp	/^void ObstacleCreate::paint (Graphics &g) {$/;"	f	class:ObstacleCreate
pathWidth	ObstacleComponent.h	/^    float widthPartition,pathWidth;$/;"	m	class:ObstacleCreate
randNum	ObstacleComponent.h	/^    Random randNum;$/;"	m	class:ObstacleCreate
readMidiData	MidiTranslation.cpp	/^void MidiTranslation::readMidiData() {$/;"	f	class:MidiTranslation
resized	CopterComponent.cpp	/^void CopterComponent::resized() {$/;"	f	class:CopterComponent
resized	MainComponent.cpp	/^void MainContentComponent::resized()$/;"	f	class:MainContentComponent
timerCallback	MainComponent.cpp	/^void MainContentComponent::timerCallback() {$/;"	f	class:MainContentComponent
timerCallback	ObstacleComponent.cpp	/^void ObstacleComponent::timerCallback () {$/;"	f	class:ObstacleComponent
viewport	MainComponent.h	/^    Viewport viewport;$/;"	m	class:MainContentComponent
width	ObstacleComponent.h	/^    int width,height;$/;"	m	class:ObstacleComponent
width	ObstacleComponent.h	/^    int width,height;$/;"	m	class:ObstacleCreate
widthPartition	ObstacleComponent.h	/^    float widthPartition,pathWidth;$/;"	m	class:ObstacleCreate
winHeight	MainComponent.h	/^    int winWidth = 600, winHeight = 400;$/;"	m	class:MainContentComponent
winWidth	MainComponent.h	/^    int winWidth = 600, winHeight = 400;$/;"	m	class:MainContentComponent
xpos	MainComponent.h	/^    float xpos, ypos;$/;"	m	class:MainContentComponent
xpos	ObstacleComponent.h	/^    int xpos=0;$/;"	m	class:ObstacleComponent
ypos	MainComponent.h	/^    float xpos, ypos;$/;"	m	class:MainContentComponent
~CopterBody	CopterBody.cpp	/^CopterBody::~CopterBody() {$/;"	f	class:CopterBody
~CopterComponent	CopterComponent.cpp	/^CopterComponent::~CopterComponent() {$/;"	f	class:CopterComponent
~CopterFan	CopterFan.cpp	/^CopterFan::~CopterFan() {$/;"	f	class:CopterFan
~MainContentComponent	MainComponent.cpp	/^MainContentComponent::~MainContentComponent()$/;"	f	class:MainContentComponent
~MidiTranslation	MidiTranslation.cpp	/^MidiTranslation::~MidiTranslation() {$/;"	f	class:MidiTranslation
~ObstacleComponent	ObstacleComponent.cpp	/^ObstacleComponent::~ObstacleComponent() {$/;"	f	class:ObstacleComponent
~ObstacleCreate	ObstacleComponent.cpp	/^ObstacleCreate::~ObstacleCreate () {$/;"	f	class:ObstacleCreate
